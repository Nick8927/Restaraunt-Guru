import aiohttp
import asyncio
from bs4 import BeautifulSoup
import re

path_to_file = r"/parsers/restaurants_vitebsk_clean.md"
INPUT_FILE = path_to_file
OUTPUT_FILE = "restaurants_vitebsk_with_phones.md"


async def fetch_page(session, url):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞."""
    try:
        async with session.get(url, timeout=10) as response:
            text = await response.text()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {url}")  # –û—Ç–ª–∞–¥–∫–∞
            return text
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
        return None


async def get_phone(session, url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞."""
    html = await fetch_page(session, url)
    if not html:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    soup = BeautifulSoup(html, "html.parser")

    with open("debug_page.html", "w", encoding="utf-8") as f:
        f.write(html)

    phone_element = soup.select_one("div#call_wrap a.call span")
    if phone_element:
        return phone_element.text.strip()

    print(f"‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {url}")
    return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"


async def parse_restaurant_phones():
    """–ü–∞—Ä—Å–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª."""
    restaurants = []
    async with aiohttp.ClientSession() as session:
        tasks = []
        with open(INPUT_FILE, "r", encoding="utf-8-sig") as file:
            for line in file:
                # –í—ã–≤–µ–¥–µ–º —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è
                print(f"üîç –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É: {line.strip()}")

                match = re.match(
                    r'\|\s*(\d+)\s*\|\s*\[\[(.+?)\]\((https?://[^\s]+)\)\]\((https?://[^\s]+)\)\s*\|\s*([\w-]+)\s*\|',
                    line,
                )
                if match:
                    idx, name, display_link, real_link, rest_id = match.groups()
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {idx}, {name}, {real_link}, {rest_id}")  # –û—Ç–ª–∞–¥–∫–∞

                    tasks.append(get_phone(session, real_link))
                    restaurants.append((idx, name, real_link, rest_id))
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É: {line.strip()}")

        if not restaurants:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")
            return

        phones = await asyncio.gather(*tasks)

    with open(OUTPUT_FILE, "w", encoding="utf-8-sig") as file:
        file.write("# üìå –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –í–∏—Ç–µ–±—Å–∫–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏\n\n")
        file.write("| ‚Ññ  | –ù–∞–∑–≤–∞–Ω–∏–µ | ID | –°—Å—ã–ª–∫–∞ | –¢–µ–ª–µ—Ñ–æ–Ω |\n")
        file.write("|----|----------|----|--------|---------|\n")

        for (idx, name, link, rest_id), phone in zip(restaurants, phones):
            file.write(f"| {idx} | [{name}]({link}) | {rest_id} | {link} | {phone} |\n")

    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {OUTPUT_FILE}")


# if __name__ == "__main__":
#     asyncio.run(parse_restaurant_phones())
